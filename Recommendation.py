# -*- coding: utf-8 -*-
"""rec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VPiofXGQSYJra6-ok__x0NM0f7Y8BdKI
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('ratings.csv') # LOADING THE DATASET 'RATINGS.CSV'

df.head()

movie_titles = pd.read_csv('movies.csv')        #LOADING THE DATASET 'MOVIES.CSV'
movie_titles.head()

df = pd.merge(df, movie_titles, on='movieId')            #MERGING THE TWO DATSETS ON BEHALF OF 2 COMMON COLUMNS 'MOVIEID'
df.head()

df.describe()

ratings = pd.DataFrame(df.groupby('title')['rating'].mean())    #GROUPING THE MOVIE TITLE WITH THE RATINGS'S MEAN VALUE
ratings.head()

ratings['number_of_ratings'] = df.groupby('title')['rating'].count() # ADDING NO. OF RATING COLUMN TO THE DATAFRAME FOR EACH MOVIE TITLE
ratings.head()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt    #VISUALISING THE RATINGS
# %matplotlib inline
ratings['rating'].hist(bins=50)

ratings['number_of_ratings'].hist(bins=60)       # VISUALISING THE NO. OF RATINGS

import seaborn as sns              #CHECKING THE RELATIONSHIP BETWEEM RATINGS OF A MOVIE AND NO. OF RATINGS
sns.jointplot(x='rating', y='number_of_ratings', data=ratings)

movie_matrix = df.pivot_table(index='userId', columns='title', values='rating')  #CREATING THE MOVIE MATRIX TO COMPUTE CORELATION BETWEEN RATING OF THE SINGLE MOVIE WITH REST OF THE MOVIES IN THE MATRIX
movie_matrix.head()

ratings.sort_values('number_of_ratings', ascending=False).head(10)   #ARANGE THE MOVIE FROM MOST RATED

AFO_user_rating = movie_matrix['Air Force One (1997)']   # SUPPOSE THAT A USER HAS WATCHED AIR FORCE ONE & CONTACT
contact_user_rating = movie_matrix['Contact (1997)']

AFO_user_rating.head()
contact_user_rating.head()

similar_to_air_force_one=movie_matrix.corrwith(AFO_user_rating)  #TO GET THE CORRELATION BETWEEN EACH MOVIE RATING AND RATING OF AIR FORCE ONE MOVIE

similar_to_air_force_one.head()

similar_to_contact = movie_matrix.corrwith(contact_user_rating)

similar_to_contact.head()

corr_contact = pd.DataFrame(similar_to_contact, columns=['Correlation'])
corr_contact.dropna(inplace=True)
corr_contact.head()
#corr_AFO = pd.DataFrame(similar_to_air_force_one, columns=['correlation'])
#corr_AFO.dropna(inplace=True)
#corr_AFO.head()

corr_AFO = pd.DataFrame(similar_to_air_force_one, columns=['correlation'])
corr_AFO.dropna(inplace=True)
corr_AFO.head()

corr_AFO = corr_AFO.join(ratings['number_of_ratings'])
corr_contact = corr_contact.join(ratings['number_of_ratings'])
corr_AFO .head()
corr_contact.head()

corr_AFO[corr_AFO['number_of_ratings'] > 100].sort_values(by='correlation', ascending=False).head(10)

corr_contact[corr_contact['number_of_ratings'] > 100].sort_values(by='Correlation', ascending=False).head(10)